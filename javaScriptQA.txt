### Hereâ€™s a list of **advanced JavaScript interview questions** commonly asked, along with brief explanations or answers to help you prepare:  

---

### **1. Explain the Event Loop and Its Phases in JavaScript.**
- The **event loop** manages the execution of synchronous and asynchronous code.
- Phases include:
  - **Call Stack:** Executes synchronous code.
  - **Web APIs:** Handles asynchronous operations like `setTimeout`, Promises, and DOM events.
  - **Task Queue/Microtask Queue:** Prioritizes Promises and `process.nextTick` over `setTimeout`.
  
---

### **2. What Are Closures? Provide an Example.**
- **Closure:** A function that retains access to its outer scope, even after the outer function has returned.
  
Example:
javascript
function outer() {
  let count = 0;
  return function inner() {
    count++;
    return count;
  };
}
const counter = outer();
console.log(counter()); // 1
console.log(counter()); // 2


---

### **3. What Is the Difference Between `var`, `let`, and `const`?**
| Feature          | `var`           | `let`           | `const`         |
|-------------------|-----------------|-----------------|-----------------|
| **Scope**        | Function        | Block           | Block           |
| **Hoisting**     | Hoisted         | Hoisted         | Hoisted         |
| **Reassignment** | Yes             | Yes             | No              |

---

### **4. What Are Promises, and How Do They Work?**
- Promises are used to handle asynchronous operations.
- A promise can be in one of three states: **Pending**, **Resolved**, or **Rejected**.

Example:
javascript
const promise = new Promise((resolve, reject) => {
  setTimeout(() => resolve("Success!"), 1000);
});
promise.then(result => console.log(result)); // After 1 second: "Success!"


---

### **5. Difference Between `call`, `apply`, and `bind`?**
- **`call`**: Invokes a function with arguments passed individually.
- **`apply`**: Invokes a function with arguments passed as an array.
- **`bind`**: Returns a new function with a specific context.

Example:
javascript
function greet(greeting, name) {
  return `${greeting}, ${name}!`;
}
console.log(greet.call(null, "Hello", "John")); // Hello, John!
console.log(greet.apply(null, ["Hi", "Jane"])); // Hi, Jane!
const boundFunc = greet.bind(null, "Hey");
console.log(boundFunc("Sam")); // Hey, Sam!


---

### **6. What Are WeakMap and WeakSet?**
- **WeakMap**: A Map where keys must be objects, and references are weak (i.e., not preventing garbage collection).
- **WeakSet**: Similar to Set but holds weak references to objects.

---

### **7. Explain Debouncing and Throttling.**
- **Debouncing:** Ensures a function is invoked only after a specified delay, useful for search input.
- **Throttling:** Limits the execution of a function to once every specified interval, useful for scroll events.

Debounce Example:
javascript
function debounce(func, delay) {
  let timer;
  return function (...args) {
    clearTimeout(timer);
    timer = setTimeout(() => func(...args), delay);
  };
}


---

### **8. What Are Modules in JavaScript?**
Modules allow code to be split into reusable pieces. Common types:
- **ES6 Modules** (`import`/`export`).
- **CommonJS Modules** (`require`/`module.exports`).

Example:
javascript
// utils.js
export const greet = name => `Hello, ${name}`;

// main.js
import { greet } from './utils.js';
console.log(greet("John"));


---

### **9. How Does `this` Work in JavaScript?**
- The value of `this` depends on how a function is invoked.
- **Global Context:** Refers to `window` in browsers, or `global` in Node.js.
- **Object Method:** Refers to the object before the dot.
- **Arrow Functions:** Lexically bound to the enclosing scope.

---

### **10. What Are Generators in JavaScript?**
- Generators are functions that can pause execution and resume later using `yield`.

Example:
javascript
function* generatorFunc() {
  yield "First";
  yield "Second";
  return "Done";
}
const gen = generatorFunc();
console.log(gen.next()); // { value: "First", done: false }
console.log(gen.next()); // { value: "Second", done: false }
console.log(gen.next()); // { value: "Done", done: true }


---

### **11. What Are Higher-Order Functions?**
- Functions that take other functions as arguments or return functions.
  
Example:
javascript
const withLogging = func => (...args) => {
  console.log(`Calling ${func.name} with args:`, args);
  return func(...args);
};


---

### **12. Explain Memory Leaks in JavaScript.**
- Common causes:
  - Unreferenced DOM elements.
  - Closures holding unnecessary references.
  - Circular references in objects.

---

### **13. How Do `setTimeout` and `setInterval` Work?**
- **`setTimeout`:** Executes a function once after a delay.
- **`setInterval`:** Executes a function repeatedly at a specified interval.

---

### **14. What Is Optional Chaining?**
- Safely access deeply nested properties.
javascript
const user = { profile: { name: "John" } };
console.log(user.profile?.age); // undefined (safe access)


### **15. Explain the Prototype Chain in JavaScript.**
- Every object in JavaScript has an internal link to another object called its **prototype**.
- The chain continues until it reaches `null` (the base of all prototypes).
  
Example:
javascript
function Person(name) {
  this.name = name;
}
Person.prototype.greet = function () {
  return `Hello, ${this.name}`;
};
const john = new Person("John");
console.log(john.greet()); // "Hello, John"
console.log(john.__proto__ === Person.prototype); // true


---

### **16. What Are Promises and Async/Await?**
- Promises: Handle asynchronous tasks by chaining `.then()` and `.catch()`.
- `async/await`: Syntactic sugar for promises that makes async code look synchronous.

Example:
javascript
async function fetchData() {
  try {
    const response = await fetch("https://api.example.com/data");
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error(error);
  }
}


---

### **17. Explain Currying in JavaScript.**
- Currying transforms a function with multiple arguments into a series of functions, each taking one argument.
  
Example:
javascript
const curry = fn => a => b => fn(a, b);
const sum = (a, b) => a + b;
const curriedSum = curry(sum);
console.log(curriedSum(2)(3)); // 5


---

### **18. What Are Pure Functions?**
- A function is **pure** if:
  - Its output depends only on input values.
  - It has no side effects.
  
Example:
javascript
function add(a, b) {
  return a + b;
}


---

### **19. What Is `typeof` and Its Pitfalls?**
- `typeof` checks the type of a value but has limitations:
  - Returns `"object"` for `null`.
  - Cannot distinguish between arrays and objects.
  
Example:
javascript
console.log(typeof null); // "object"
console.log(Array.isArray([])); // true


---

### **20. What Is Hoisting?**
- JavaScript moves variable and function declarations to the top of their scope during the compilation phase.
- Variables declared with `var` are hoisted but initialized to `undefined`.

Example:
javascript
console.log(a); // undefined
var a = 5;


---

### **21. Explain the Difference Between `map`, `filter`, and `reduce`.**
- **`map`:** Transforms an array by applying a function to each element.
- **`filter`:** Creates a new array with elements that pass a condition.
- **`reduce`:** Reduces an array to a single value by applying a function.

Example:
javascript
const arr = [1, 2, 3];
console.log(arr.map(x => x * 2)); // [2, 4, 6]
console.log(arr.filter(x => x > 1)); // [2, 3]
console.log(arr.reduce((acc, x) => acc + x, 0)); // 6


---

### **22. What Is the Difference Between `Object.freeze()` and `Object.seal()`?**
- **`Object.freeze()`:** Prevents adding, removing, or modifying properties.
- **`Object.seal()`:** Prevents adding or removing properties but allows modification of existing properties.

---

### **23. How Is `for...in` Different from `for...of`?**
- **`for...in`:** Iterates over property names of an object.
- **`for...of`:** Iterates over iterable objects like arrays, strings, or maps.

---

### **24. What Are JavaScript Decorators?**
- A **decorator** is a function that modifies a class or its members.

Example:
javascript
function readonly(target, name, descriptor) {
  descriptor.writable = false;
  return descriptor;
}

class Person {
  @readonly
  name() {
    return "John";
  }
}


---

### **25. What Are Symbols in JavaScript?**
- A `Symbol` is a unique, immutable primitive value used to create unique property keys.

Example:
javascript
const sym = Symbol("unique");
const obj = { [sym]: "value" };
console.log(obj[sym]); // "value"


---

### **26. Explain Temporal Dead Zone in JavaScript.**
- The period between entering a block and variable initialization is the **Temporal Dead Zone (TDZ)**.

Example:
javascript
{
  console.log(a); // ReferenceError
  let a = 10;
}


---

### **27. Explain the Concept of Shadowing in JavaScript.**
- **Shadowing** occurs when a variable declared in a local scope has the same name as one in an outer scope.

Example:
javascript
let x = 10;
function test() {
  let x = 20; // Shadows the outer x
  console.log(x); // 20
}


---

### **28. What Are Web Workers?**
- Web Workers allow you to run JavaScript in background threads, improving performance for CPU-intensive tasks.

Example:
javascript
const worker = new Worker("worker.js");
worker.postMessage("Hello, worker!");
worker.onmessage = e => console.log(e.data);


---

### **29. Explain the Difference Between `==` and `===`.**
- `==`: Performs type coercion.
- `===`: Strict equality (no type coercion).

Example:
javascript
console.log(0 == "0"); // true
console.log(0 === "0"); // false


---

### **30. What Is a Polyfill?**
- A polyfill is code that provides modern functionality on older browsers.

Example:
Adding `Array.prototype.includes` for older browsers:
javascript
if (!Array.prototype.includes) {
  Array.prototype.includes = function (element) {
    return this.indexOf(element) !== -1;
  };
}

 Explain Dynamic Import.
Allows importing modules dynamically at runtime using import().
Example:

javascript
Copy code
async function loadModule() {
  const { default: module } = await import("./module.js");
  module();
}
###31. What Are Tagged Templates?
Tagged templates allow processing template literals with a function.
Example:

javascript
Copy code
function tag(strings, ...values) {
  return strings[0] + values.join(", ");
}
const result = tag`Hello ${"World"} and ${"JavaScript"}`;
console.log(result); // Hello World, JavaScript
###31. What Is Memoization?
A technique to cache function results for specific inputs.
Example:

javascript
Copy code
const memoize = (fn) => {
  const cache = {};
  return (...args) => {
    const key = JSON.stringify(args);
    if (!cache[key]) {
      cache[key] = fn(...args);
    }
    return cache[key];
  };
};

const fib = memoize((n) => (n <= 1 ? n : fib(n - 1) + fib(n - 2)));
console.log(fib(40)); // Cached results speed up subsequent calls
###32. What Are Optional Chaining and Nullish Coalescing?
Optional chaining (?.): Avoids errors when accessing nested properties.
Nullish coalescing (??): Provides a default value for null or undefined.
Example:

javascript
Copy code
const obj = { a: { b: null } };
console.log(obj.a?.b?.c); // undefined
console.log(obj.a.b ?? "default"); // "default"
###33. Explain Module Bundlers Like Webpack.
Module bundlers combine JavaScript files and dependencies into a single bundle for better performance.
###34. What Are Proxy Objects?
Proxy allows custom behavior for operations on objects (e.g., get, set).
Example:

javascript
Copy code
const handler = {
  get(target, prop) {
    return prop in target ? target[prop] : "Not found";
  },
};
const proxy = new Proxy({ a: 1 }, handler);
console.log(proxy.a); // 1
console.log(proxy.b); // "Not found"
###35. What Is Dynamic Typing in JavaScript?
Variables can hold any type of value, and the type can change dynamically.
Example:

javascript
Copy code
let x = 10;
x = "Hello";

Q 1. Multiple function want to exicute parallel?
Ans. // Simulating async functions
const functionOne = () => new Promise((resolve, reject) => {
  setTimeout(() => {
    console.log("Function One executed");
    resolve("Result from Function One");
  }, 1000);
});

const functionTwo = () => new Promise((resolve, reject) => {
  setTimeout(() => {
    console.log("Function Two executed");
    reject(new Error("Function Two failed"));
  }, 1500);
});

const functionThree = () => new Promise((resolve, reject) => {
  setTimeout(() => {
    console.log("Function Three executed");
    resolve("Result from Function Three");
  }, 500);
});

// Execute functions in parallel
const executeAllFunctions = async () => {
  try {
    const results = await Promise.all([
      functionOne().catch(err => err.message),  // Catch error and handle it within
      functionTwo().catch(err => err.message),  // Catch error and handle it within
      functionThree().catch(err => err.message) // Catch error and handle it within
    ]);

    console.log("All functions completed with results:", results);
  } catch (error) {
    console.error("Error executing functions:", error);  // This won't catch errors anymore
  }
};

executeAllFunctions();
Ans2 : const functionOne = () => new Promise((resolve, reject) => {
  setTimeout(() => resolve("Result from Function One"), 1000);
});

const functionTwo = () => new Promise((resolve, reject) => {
  setTimeout(() => reject(new Error("Function Two failed")), 1500);
});

const functionThree = () => new Promise((resolve, reject) => {
  setTimeout(() => resolve("Result from Function Three"), 500);
});

const executeAllFunctions = async () => {
  const results = await Promise.allSettled([
    functionOne(),
    functionTwo(),
    functionThree()
  ]);

  results.forEach((result, index) => {
    if (result.status === "fulfilled") {
      console.log(`Function ${index + 1} completed successfully with: ${result.value}`);
    } else {
      console.log(`Function ${index + 1} failed with error: ${result.reason.message}`);
    }
  });
};

executeAllFunctions();
