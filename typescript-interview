
### 1. **What is TypeScript? Why use it over JavaScript?**
TypeScript is a strongly typed, object-oriented, compiled language and a superset of JavaScript. It provides static typing, enhances code readability, and helps in catching errors at compile time, making large projects easier to maintain.

---

### 2. **What are the key features of TypeScript?**
1. Static Typing (optional types).
2. Interfaces and Generics.
3. Support for modern JavaScript (ESNext) features.
4. Type Inference.
5. Compatibility with JavaScript.
6. Improved tooling and editor support.

---

### 3. **How is TypeScript different from JavaScript?**
- TypeScript supports static typing; JavaScript does not.
- TypeScript is compiled into JavaScript.
- TypeScript offers advanced OOP features like interfaces, generics, and enums.

---

### 4. **What are TypeScript interfaces?**
Interfaces define the structure of an object and act as a contract for objects in your code.

Example:
```typescript
interface User {
  name: string;
  age: number;
}

const user: User = { name: "John", age: 30 }; // Valid
```

---

### 5. **What are TypeScript Generics?**
Generics provide a way to create reusable components that work with different data types while retaining type safety.

Example:
```typescript
function identity<T>(value: T): T {
  return value;
}

console.log(identity<number>(42));  // Works with numbers
console.log(identity<string>("Hello"));  // Works with strings
```

---

### 6. **What are decorators in TypeScript?**
Decorators are special functions used to modify classes or methods. They are often used in frameworks like Angular.

Example:
```typescript
function Log(target: any, propertyKey: string) {
  console.log(`Decorated property: ${propertyKey}`);
}

class MyClass {
  @Log
  myMethod() {
    console.log("Inside myMethod");
  }
}
```

---

### 7. **What is `any` in TypeScript? Why avoid using it?**
The `any` type allows any value and disables type checking, defeating the purpose of TypeScript’s static typing. Use `unknown` or specific types instead.

---

### 8. **Explain type inference in TypeScript.**
TypeScript can automatically infer the type of a variable based on its value without explicitly specifying the type.

Example:
```typescript
let num = 42; // TypeScript infers 'num' as a number.
```

---

### 9. **What is the difference between `interface` and `type`?**
| **Aspect**            | **Interface**               | **Type**                         |
|------------------------|-----------------------------|-----------------------------------|
| **Usage**             | Describes object structures.| Can represent any type (primitive, union, etc.). |
| **Extensibility**     | Extendable with other interfaces.| Cannot be extended but can use intersection. |

Example:
```typescript
interface IUser {
  name: string;
}
type Role = "admin" | "user";
```

---

### 10. **What are modules in TypeScript?**
Modules are reusable pieces of code defined in separate files.

Example:
```typescript
// module.ts
export const PI = 3.14;

// app.ts
import { PI } from "./module";
console.log(PI);
```

---

### 11. **What is `unknown` in TypeScript?**
The `unknown` type is a safer alternative to `any`, as you cannot use its value without type-checking first.

Example:
```typescript
let value: unknown;

value = 5;
if (typeof value === "number") {
  console.log(value + 10); // TypeScript ensures it's safe to use.
}
```

---

### 12. **How does TypeScript handle null or undefined?**
TypeScript has strict null checks enabled via `strictNullChecks`. It prevents assigning `null` or `undefined` unless explicitly allowed.

Example:
```typescript
let value: number | null = null;
value = 42; // Valid
```

---

### 13. **What is the purpose of `readonly` in TypeScript?**
The `readonly` keyword prevents modification of properties after assignment.

Example:
```typescript
class User {
  readonly id: number;
  constructor(id: number) {
    this.id = id;
  }
}

const user = new User(1);
user.id = 2; // Error: Cannot assign to 'id' because it is a read-only property.
```

---

### 14. **What are Type Aliases in TypeScript?**
Type aliases provide a way to define a type with a custom name.

Example:
```typescript
type ID = string | number;
let userId: ID = 123;
```

---

### 15. **What are mapped types?**
Mapped types allow you to create new types by transforming existing ones.

Example:
```typescript
type ReadOnly<T> = {
  readonly [K in keyof T]: T[K];
};

type User = { name: string; age: number };
type ReadonlyUser = ReadOnly<User>;
```

---

### 16. **What are conditional types?**
Conditional types perform checks and return different types based on the condition.

Example:
```typescript
type IsString<T> = T extends string ? true : false;
type Result = IsString<"Hello">; // true
```

---

### 17. **What is a union type?**
A union type allows a variable to hold one of several types.

Example:
```typescript
let value: number | string;
value = 42;      // Valid
value = "Hello"; // Valid
```

---

### 18. **What are utility types in TypeScript?**
Utility types provide common type transformations. Examples include:
1. `Partial`: Makes all properties optional.
2. `Readonly`: Makes all properties readonly.
3. `Pick`: Extracts a subset of properties.
4. `Omit`: Excludes specific properties.

Example:
```typescript
type User = { name: string; age: number };
type PartialUser = Partial<User>; // { name?: string; age?: number; }
```

---

### 19. **How does TypeScript support async/await?**
TypeScript supports `async/await` for asynchronous programming by compiling it into JavaScript.

Example:
```typescript
async function fetchData(): Promise<string> {
  return "Data";
}
fetchData().then(console.log);
```

---

### 20. **What is JSX in TypeScript?**
TypeScript extends support for JSX, used in frameworks like React. File extensions include `.tsx`.

Example:
```tsx
const App = () => <h1>Hello TypeScript with React!</h1>;
```
Here are additional **TypeScript interview questions with answers**:

---

### 21. **What is TypeScript’s `as` keyword?**
The `as` keyword is used for **type assertions** in TypeScript. It tells the compiler to treat a value as a specified type. It does not perform type checking at runtime, only instructs the compiler.

Example:
```typescript
let value: any = "Hello";
let strLength: number = (value as string).length;
```

---

### 22. **What are the access modifiers in TypeScript?**
TypeScript supports the following **access modifiers**:
- `public`: Accessible anywhere (default).
- `private`: Accessible only within the class.
- `protected`: Accessible within the class and its subclasses.

Example:
```typescript
class Person {
  public name: string;
  private age: number;
  protected email: string;

  constructor(name: string, age: number, email: string) {
    this.name = name;
    this.age = age;
    this.email = email;
  }
}
```

---

### 23. **What are enums in TypeScript?**
Enums are a special type used to define a set of named constants.

Example:
```typescript
enum Colors {
  Red = 1,
  Green,
  Blue
}

console.log(Colors.Green); // 2
```

---

### 24. **What is the `never` type in TypeScript?**
The `never` type represents values that will never occur, typically used in functions that always throw errors or have infinite loops.

Example:
```typescript
function throwError(message: string): never {
  throw new Error(message);
}
```

---

### 25. **How do you define a function in TypeScript?**
TypeScript allows you to define function types explicitly, including parameters and return types.

Example:
```typescript
function add(a: number, b: number): number {
  return a + b;
}
```

---

### 26. **What is type narrowing in TypeScript?**
Type narrowing reduces a union type to a specific type based on runtime checks, such as `typeof`, `instanceof`, or custom type guards.

Example:
```typescript
function process(value: number | string) {
  if (typeof value === "string") {
    console.log(value.toUpperCase());
  } else {
    console.log(value + 1);
  }
}
```

---

### 27. **What are the different types of type guards in TypeScript?**
Type guards refine a type during runtime. Common methods include:
1. **`typeof` type guard**:
   ```typescript
   if (typeof x === "string") { /* ... */ }
   ```
2. **`instanceof` type guard**:
   ```typescript
   if (x instanceof Date) { /* ... */ }
   ```
3. **Custom type guard**:
   ```typescript
   function isUser(obj: any): obj is User {
     return "name" in obj;
   }
   ```

---

### 28. **What is a tuple in TypeScript?**
A tuple is a fixed-length, ordered array where each element can have a different type.

Example:
```typescript
let tuple: [number, string];
tuple = [1, "TypeScript"];
```

---

### 29. **How can you declare optional parameters in TypeScript?**
Optional parameters are indicated with a `?` and must come after required parameters.

Example:
```typescript
function greet(name: string, age?: number) {
  console.log(`Hello, ${name}. Age: ${age || "unknown"}`);
}
```

---

### 30. **What are union and intersection types in TypeScript?**
1. **Union types**: A variable can be of one type from multiple.
   ```typescript
   let value: number | string;
   value = 10;
   value = "Hello";
   ```

2. **Intersection types**: Combines multiple types into one.
   ```typescript
   type Admin = { name: string; privileges: string[] };
   type Employee = { name: string; startDate: Date };
   type ElevatedEmployee = Admin & Employee;
   ```

---

### 31. **What are ambient declarations in TypeScript?**
Ambient declarations let TypeScript know about existing JavaScript code or third-party libraries without compiling them. These are defined using `.d.ts` files.

Example:
```typescript
declare var jQuery: any;
jQuery("#id").css("color", "red");
```

---

### 32. **What is a `type guard` in TypeScript?**
A type guard ensures that a value conforms to a specific type at runtime. Common methods include using `typeof`, `instanceof`, or custom predicates.

Example:
```typescript
function isString(value: unknown): value is string {
  return typeof value === "string";
}

if (isString("hello")) {
  console.log("It’s a string!");
}
```

---

### 33. **What is the difference between `any` and `unknown`?**
| **Aspect**      | **any**                         | **unknown**                   |
|------------------|---------------------------------|--------------------------------|
| Type checking   | Bypasses type checking entirely.| Requires proper type checking.|
| Usage flexibility | Any operation is allowed.      | Must be type-checked first.   |

Example:
```typescript
let value: unknown;
value = "Hello";

// Compile-time error unless type-checked
console.log((value as string).length);
```

---

### 34. **What are default parameters in TypeScript?**
You can define a default value for function parameters that is used if no value is provided.

Example:
```typescript
function greet(name: string = "Guest") {
  console.log(`Hello, ${name}`);
}
```

---

### 35. **How do you make a property readonly in TypeScript?**
Using the `readonly` keyword before a property makes it immutable.

Example:
```typescript
class Person {
  readonly id: number;
  constructor(id: number) {
    this.id = id;
  }
}
```

---

### 36. **What are discriminated unions in TypeScript?**
Discriminated unions use a common property (called a discriminator) to differentiate between multiple object types.

Example:
```typescript
type Square = { kind: "square"; size: number };
type Circle = { kind: "circle"; radius: number };

type Shape = Square | Circle;

function area(shape: Shape) {
  switch (shape.kind) {
    case "square":
      return shape.size ** 2;
    case "circle":
      return Math.PI * shape.radius ** 2;
  }
}
```

---

### 37. **Explain Type Aliases vs Interfaces in TypeScript.**
Both can define object types, but **type aliases** are more versatile.

Example (Type Alias for Union):
```typescript
type StringOrNumber = string | number;
```

Use **interfaces** for object structures when extensibility is required.

---

### 38. **What is the purpose of `keyof` in TypeScript?**
`keyof` creates a union of the keys of a type.

Example:
```typescript
type User = { name: string; age: number };
type UserKeys = keyof User; // "name" | "age"
```

---

### 39. **What is a utility type?**
Utility types like `Partial`, `Pick`, and `Omit` help transform types.

Example (`Omit`):
```typescript
type Person = { name: string; age: number; address: string };
type WithoutAddress = Omit<Person, "address">;
```

---

### 40. **What is the difference between `declare` and `export` in TypeScript?**
- **`declare`**: Used for defining types or modules that exist but are not explicitly implemented (e.g., ambient declarations).
- **`export`**: Used to expose code in a module.

---

### 41. **What is the significance of `tsconfig.json`?**
It is the configuration file that defines how TypeScript compiles code.

Example:
```json
{
  "compilerOptions": {
    "target": "ES6",
    "module": "CommonJS",
    "strict": true
  }
}
